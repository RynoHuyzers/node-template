# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
# Use a package of configuration called an orb.
orbs:
  node: circleci/node@4.2.0
  aws-cli: circleci/aws-cli@1.4.1
jobs:
  run_tests:
    docker:
      - image: circleci/node:10
    working_directory: ~/repo
    steps:  
      - run:
          command: whoami
      - checkout
      - restore_cache:
          keys:
          - v1-dependencies-
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      - run:
          name: Install npm dependencies
          command: |
            npm install --save
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-
      - run:
          name: Run unit tests
          command: |
            npm run test
      - run:
          name: Build Nest Layer
          command: |
            npm run nest-layer:build
      - run:
          name: Build Rest-API
          command: |
            npm run rest-api:build
      - run:
          name: Build
          command: |
            # Deployable Zip
                        npm prune --production
                        npx mkdirp deploy/rest-api

                        cd build

                        ## zip all build artifact from rest-api:build
                        zip -r9 ../deploy/rest-api/client-management-rest-lambda.zip *
                        cd ..
                        ## zip node modules into zip file
                        zip -r9 deploy/rest-api/client-management-rest-lambda.zip node_modules/
                        rm -rf node_modules
      - run:
          name: Build
          command: |
            npm run rest-api:build
      - run:
          name: Deploy
          command: |
            echo "Deploy Nest Layer"
            npm run cdk:build:nest-layer

            cd cdk/src/nest-layer
            npx rimraf cdk.out

                      
            npm run cdk:deploy:nest-layer -- --require-approval=never
      - run:
          name: Build
          command: |
            echo "Deploy REST API Proxy Lambda"
                        ## cd into cdk directory and compiles cdk
                        npm run cdk:build:rest-api-proxy

                        cd cdk/src/rest-api/proxy-lambda
                        npx rimraf cdk.out

                        ## Deploys zip file created during cdk compile
                        npm run cdk:deploy:rest-api-proxy -- --require-approval=never
workflows:
  test:
    jobs:
      - run_tests
